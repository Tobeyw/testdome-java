import java.util.Arrays;
/*
 * 该恶意软件使用文件中数字数组的滑动窗口，并尝试匹配以下模式:
Tl,-，-，X，-，-，-，Tr
整个窗口移动，以便”X”通过所有值，并与”丅”"和”Tr"位置的数字进行比较，这些数字位于”x”的恒定偏移处。该恶意软件有以下规则:
。如果模式中“丅”或”Tr”位置的值大于或等于”x”位置的值，则恶意软件会将”X”的值替换为 0.
。如果”TI”或”Tr"偏移处的值超出范围，则”X”处的值仅与其他现有值进行比较。
记录的处理分为两个阶段:首先，使用原始值进行比较，找到所有应设置为0的位置。只有确定了所有位置后，才会将其设置为 0。
例如，如果记录文件中的值如下:
new int[]{1,2，0，5，0，2，4，3，3，3 }
恶意软件运行后的预期值为:
new int[]{1,0,0，5，0，0，0，3，3，0 }
在这个例子中，两个“2”、“4”和最后的”3”都被0替换。
实现模拟方法，以便复制恶意软件行为以供进一步研究。
 */
public class MalwareAnalysis {
    public static int[] simulate(int[] entries) {
       
       int tlOffset = -3; 
       int trOffset = 4; 
       boolean[] toZero = new boolean[entries.length];

       for (int i = 0; i < entries.length; i++) {
           int tlIndex = i + tlOffset;
           int trIndex = i + trOffset;

           boolean tlInRange = tlIndex >= 0 && tlIndex < entries.length;
           boolean trInRange = trIndex >= 0 && trIndex < entries.length;

           if ((tlInRange && entries[tlIndex] >= entries[i]) ||
               (trInRange && entries[trIndex] >= entries[i])) {
               toZero[i] = true;
              // System.out.print(i);
           }
       }

       for (int i = 0; i < entries.length; i++) {
           if (toZero[i]) {
            entries[i] = 0;
           }
       }

       return entries;
    }

    public static void main(String[] args) {
        int[] records = new int[] { 1, 2, 0, 5, 0, 2, 4, 3, 3, 3 };
    
        System.out.println(Arrays.toString(simulate(records)));

      
       
        // Expected output:
        // 1, 0, 0, 5, 0, 0, 0, 3, 3, 0
    }
}